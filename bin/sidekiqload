#!/usr/bin/env ruby

# command: bundle exec bin/sidekiqload

require "sidekiq"

x = Sidekiq.configure_embed do |config|
  config.concurrency = 15
  config.queues = %w[default]
  config.logger.level = Logger::ERROR
  config.average_scheduled_poll_interval = 2
end

class LoadJob
  include Sidekiq::Job
  sidekiq_options retry: 1

  def fib(n)
    if n <= 1
      1
    else
      (fib(n-1) + fib(n-2))
    end
  end

  def perform(idx, ts = nil)
    # start = Process.clock_gettime(Process::CLOCK_MONOTONIC)
    # # puts "started task\n"
    # sleep rand(100)/100.0
    # fib(33)
    # sleep 0.5
    # fib(20)
    # sleep 0.01
    # puts "#{idx} ended task #{Process.clock_gettime(Process::CLOCK_MONOTONIC) - start}\n"
  end
end

self_read, self_write = IO.pipe
%w[INT TERM TSTP TTIN].each do |sig|
  trap sig do
    self_write.puts(sig)
  end
rescue ArgumentError
  puts "Signal #{sig} not supported"
end

Sidekiq.redis { |c| c.flushdb }
def handle_signal(launcher, sig)
  Sidekiq.logger.debug "Got #{sig} signal"
  case sig
  when "INT"
    # Handle Ctrl-C in JRuby like MRI
    # http://jira.codehaus.org/browse/JRUBY-4637
    raise Interrupt
  when "TERM"
    # Heroku sends TERM and then waits 30 seconds for process to exit.
    raise Interrupt
  when "TSTP"
    Sidekiq.logger.info "Received TSTP, no longer accepting new work"
    launcher.quiet
  when "TTIN"
    Thread.list.each do |thread|
      Sidekiq.logger.warn "Thread TID-#{(thread.object_id ^ ::Process.pid).to_s(36)} #{thread["label"]}"
      if thread.backtrace
        Sidekiq.logger.warn thread.backtrace.join("\n")
      else
        Sidekiq.logger.warn "<no backtrace available>"
      end
    end
  end
end

def Process.rss
  `ps -o rss= -p #{Process.pid}`.chomp.to_i
end

iter = 100
count = 10_000
Sidekiq.logger.error "Uploading #{count * iter} jobs..."
iter.times do
  arr = Array.new(count) { |idx| [idx] }
  Sidekiq::Client.push_bulk("class" => LoadJob, "args" => arr)
end
Sidekiq.logger.error "Created #{count * iter} jobs"

def jobs_count
  Sidekiq.redis do |conn|
    conn.llen "queue:default"
  end
end  

start = Time.now

Monitoring = Thread.new do
  total = jobs_count
  Sidekiq.logger.error("RSS: #{Process.rss} Pending: #{total}")
  loop do
    sleep 2.0
    total = jobs_count
    # Sidekiq.logger.error("RSS: #{Process.rss} Pending: #{total}")
    if total == 0
      Sidekiq.logger.error("RSS: #{Process.rss} Pending: #{total}")
      Sidekiq.logger.error("Done, #{iter * count} jobs in #{Time.now - start} sec")

      sleep 0.2
      exit(0)
    end
  end
end

begin
  x.run

  while (readable_io = IO.select([self_read]))
    signal = readable_io.first[0].gets.strip
    handle_signal(x, signal)
  end
rescue => e
  warn e.message
  warn e.backtrace.join("\n")
  exit 1
ensure
  x.stop
end
