#!/usr/bin/env ruby

# command: bundle exec bin/jigglerload
# bundle exec bin/jiggler -v -r ./spec/fixtures/jobs

# require_relative '../lib/jiggler'
# require_relative '../lib/jiggler/cli'

# require 'debug'


# require 'jiggler'
# require 'jiggler/cli'

# require 'ruby-prof'

# require 'heap-profiler'

require_relative '../lib/jiggler/support/component'
require_relative '../lib/jiggler/scheduled/enqueuer'
require_relative '../lib/jiggler/scheduled/poller'
require_relative '../lib/jiggler/stats/collection'
require_relative '../lib/jiggler/stats/monitor'

require_relative '../lib/jiggler/errors'
require_relative '../lib/jiggler/redis_store'
require_relative '../lib/jiggler/job'
require_relative '../lib/jiggler/config'
require_relative '../lib/jiggler/cleaner'
require_relative '../lib/jiggler/retrier'
require_relative '../lib/jiggler/launcher'
require_relative '../lib/jiggler/manager'
require_relative '../lib/jiggler/worker'
require_relative '../lib/jiggler/summary'
require_relative '../lib/jiggler/version'

require_relative '../lib/jiggler/core'
require_relative '../lib/jiggler/cli'

Jiggler.config[:server_mode] = true

Jiggler.configure_server do |config|
  config[:poll_interval] = 2
  config[:concurrency] = 15
  # config[:poller_enabled] = false
  config.logger.level = Logger::WARN
end
Jiggler.run_configuration

class LoadJob
  include Jiggler::Job
  job_options retries: 1

  def fib(n)
    if n <= 1
      1
    else
      (fib(n-1) + fib(n-2))
    end
  end

  def perform(idx, ts = nil)
    # start = Process.clock_gettime(Process::CLOCK_MONOTONIC)
    # # puts "started task\n"
    # sleep 0.01
    # fib(33)
    # sleep 0.5
    # fib(20)
    # sleep 0.01
    # puts "#{idx} ended task #{Process.clock_gettime(Process::CLOCK_MONOTONIC) - start}\n"
  end
end

Sync { Jiggler.config.cleaner.prune_all }

cli = Jiggler::CLI.instance

iter = 100
count = 10_000
Jiggler.logger.warn "Uploading #{count * iter} jobs..."
Sync do
  iter.times do |i|
    arr = Array.new(count) { |idx| [idx] }
    LoadJob.enqueue_bulk(arr)
  end
end
Jiggler.logger.warn "Created #{count * iter} jobs"

def Process.rss
  `ps -o rss= -p #{Process.pid}`.chomp.to_i
end

def jobs_count
  Sync do
    Jiggler.config.redis_pool.acquire do |conn|
      conn.call 'LLEN', 'jiggler:list:default'
    end
  end
end

start = Time.now
Monitoring = Thread.new do
  total = jobs_count
  Jiggler.logger.warn("RSS: #{Process.rss} Pending: #{total}")
  loop do
    sleep 2.0
    total = jobs_count
    # Jiggler.logger.warn("RSS: #{Process.rss} Pending: #{total}")
    # Sync { Jiggler.logger.warn(Jiggler.summary) }
    if total == 0
      Jiggler.logger.warn("RSS: #{Process.rss} Pending: #{total}")
      Jiggler.logger.warn("Done, #{iter * count} jobs in #{Time.now - start} sec")

      sleep 0.2
      break
    end
  end
  Process.kill("INT", Process.pid)
end

def start_jiggler(cli)
  begin
    cli.parse

    cli.config.logger.warn("Jiggler is starting for LOAD TEST ✯⸜(*❛‿❛)⸝✯")
    cli.config.logger.warn("Jiggler version=#{Jiggler::VERSION} pid=#{Process.pid} concurrency=#{cli.config[:concurrency]} queues=#{cli.config[:queues].join(',')}")
    cli.start
  rescue => e
    warn e.message
    warn e.backtrace.join("\n")
  end
end

start_jiggler(cli)

# -> RubyProf
# RubyProf.exclude_threads = [Monitoring]
# RubyProf.measure_mode = RubyProf::ALLOCATIONS
# result = RubyProf.profile(:track_allocations => true) do
#   start_jiggler(cli)
#   Jiggler.logger.warn("Ruby-prof is wrapping up...")
# end
# printer = RubyProf::GraphHtmlPrinter.new(result)
# printer.print(File.new("tmp/rubyprof.html", "w"), min_percent: 10)

# -> HeapProfiler
# heap-profiler tmp/allocated.heap
# HeapProfiler.report("tmp") do
#   start_jiggler(cli)
# end
