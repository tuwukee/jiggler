#!/usr/bin/env ruby

# command: bundle exec bin/jigglerload

require_relative "../lib/jiggler"
require_relative "../lib/jiggler/cli"

require "ruby-prof"

class LoadJob
  include Jiggler::Job
  job_options retries: 1

  def perform(idx, ts = nil)
    puts(Time.now.to_f - ts) if !ts.nil?
  end
end

Jiggler.configure_server do |config|
  # config[:poll_interval] = 2
  config[:boot_app] = false
  config[:poller_enabled] = false
  config[:stats_enabled] = false
  config.logger.level = Logger::WARN
end

Jiggler.config.cleaner.prune_all

cli = Jiggler::CLI.instance

iter = 5
count = 10_000
iter.times do |i|
  arr = Array.new(count) { |idx| [idx] }
  LoadJob.enqueue_bulk(arr)
end
Jiggler.logger.warn "Created #{count * iter} jobs"

def Process.rss
  `ps -o rss= -p #{Process.pid}`.chomp.to_i
end

start = Time.now
Monitoring = Thread.new do
  loop do
    sleep 1.0
    qsize = Jiggler.redis do |conn|
      conn.llen "jiggler:list:default"
    end
    total = qsize
    Jiggler.logger.warn("RSS: #{Process.rss} Pending: #{total}")
    if total == 0
      Jiggler.logger.warn("Done, #{iter * count} jobs in #{Time.now - start} sec")
      Jiggler.logger.warn("Latency for three jobs")

      LoadJob.enqueue(1, Time.now.to_f)
      LoadJob.enqueue(2, Time.now.to_f)
      LoadJob.enqueue(3, Time.now.to_f)

      sleep 0.2

      Process.kill("INT", Process.pid)
      break
    end
  end
end

RubyProf.exclude_threads = [Monitoring]
RubyProf.measure_mode = RubyProf::ALLOCATIONS
result = RubyProf.profile(:track_allocations => true) do
  begin
    cli.parse
    cli.config.logger.warn "...Starting Jiggler for loadtest..."
    cli.config.logger.warn("Jiggler version=#{Jiggler::VERSION} pid=#{Process.pid} concurrency=#{cli.config[:concurrency]} queues=#{cli.config[:queues].join(',')}")
    cli.start
  rescue => e
    warn e.message
    warn e.backtrace.join("\n")
    # exit 1
  end
end

Jiggler.logger.warn("Profiling...")

printer = RubyProf::GraphHtmlPrinter.new(result)
printer.print(File.new("output.html", "w"), min_percent: 1)
