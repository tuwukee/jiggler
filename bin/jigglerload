#!/usr/bin/env ruby

# command: bundle exec bin/jigglerload

# require 'debug'
# require 'jiggler'
# require 'jiggler/cli'

# require 'ruby-prof'
# require 'heap-profiler'

# require 'uri'
# require 'net/http'
# require 'pg'
# require 'connection_pool'
# require 'async/http/internet'

# require_relative '../lib/jiggler/support/helper'
# require_relative '../lib/jiggler/scheduled/enqueuer'
# require_relative '../lib/jiggler/scheduled/poller'
# require_relative '../lib/jiggler/stats/collection'
# require_relative '../lib/jiggler/stats/monitor'
# 
# require_relative '../lib/jiggler/errors'
# require_relative '../lib/jiggler/redis_store'
# require_relative '../lib/jiggler/job'
# require_relative '../lib/jiggler/config'
# require_relative '../lib/jiggler/cleaner'
# require_relative '../lib/jiggler/retrier'
# require_relative '../lib/jiggler/launcher'
# require_relative '../lib/jiggler/manager'
# require_relative '../lib/jiggler/worker'
# require_relative '../lib/jiggler/summary'
# require_relative '../lib/jiggler/version'
# 
# require_relative '../lib/jiggler/core'
# require_relative '../lib/jiggler/cli'

require 'jiggler'

CONCURRENCY = 5
ITERATIONS = 1
BATCH = 100_000

# $internet = Async::HTTP::Internet.new
# $pg_pool = ConnectionPool.new(size: CONCURRENCY) { PG.connect(dbname: 'test', password: 'test', user: 'test') }

Jiggler.configure do |config|
  config[:poll_interval] = 5
  config[:concurrency] = CONCURRENCY
  config[:client_concurrency] = 1
  # config[:redis_url] = "redis://jiggler_redis:6379"
  config[:timeout] = 100
  config.logger.level = Logger::WARN
end

Jiggler.config.cleaner.prune_all

class LoadJob
  include Jiggler::Job
  job_options retries: 1

  def fib(n)
    if n <= 1
      1
    else
      (fib(n-1) + fib(n-2))
    end
  end

  def async_get_request
    uri = "http://127.0.0.1:9292/hello"
    res = $internet.get(uri)
    res.finish
    puts "Request Error!!!" unless res.status == 200
  end

  def net_http_get_request
    uri = URI("http://127.0.0.1:9292/hello")
    res = Net::HTTP.get_response(uri)
    puts "Request Error!!!" unless res.is_a?(Net::HTTPSuccess)
  end

  def pg_query
    $pg_pool.with do |conn|
      conn.exec("SELECT pg_sleep(0.1)")
    end
  end

  def file_io(id)
    File.open("tmp/logs/test.txt", "a") { |f| f.write("#{id}\n") }
  end

  def perform(id)
  end
end

def get_rss_cpu(pid, cpus = nil)
  data = `ps -o rss,%cpu= -p #{pid}`.split("\n").last.strip.split(" ")
  cpu = data[1].to_f.round(2)
  cpus << cpu if !cpus.nil? && cpu > 0
  "RSS: #{data[0]} %CPU: #{cpu}"
end

def jobs_count
  Jiggler.config.client_redis_pool.acquire do |conn|
    conn.call 'LLEN', 'jiggler:list:default'
  end
end

count = ITERATIONS * BATCH

Jiggler.logger.warn "Uploading #{count} jobs..."

ITERATIONS.times do |i|
  arr = Array.new(BATCH) { |id| [id] }
  LoadJob.enqueue_bulk(arr)
end
Jiggler.logger.warn "Created #{count} jobs"
total = jobs_count
Jiggler.logger.warn("--------->>> Main process before fork: #{get_rss_cpu(Process.pid)} Pending: #{total}")

real_start = Process.clock_gettime(Process::CLOCK_MONOTONIC)
p2 = fork do
  require 'jiggler/server'

  cli = Jiggler::CLI.instance

  def start_jiggler(cli)
    begin
      cli.parse_and_init
  
      cli.config.logger.warn("Jiggler is starting for LOAD TEST ✯⸜(*❛‿❛)⸝✯")
      cli.config.logger.warn("Jiggler version=#{Jiggler::VERSION} pid=#{Process.pid} concurrency=#{cli.config[:concurrency]} queues=#{cli.config[:queues].join(',')}")
      cli.start
    rescue => e
      warn e.message
      warn e.backtrace.join("\n")
    end
  end

  start_jiggler(cli)
end

start = Time.now
cpus = [0]
loop do
  total = jobs_count
  Jiggler.logger.warn("#{get_rss_cpu(p2, cpus)} Pending: #{total} Time: #{(Time.now - start).round(2)} sec")
  if total == 0
    Jiggler.logger.warn("Done, #{count} jobs in #{Time.now - start} sec")
    break
  end
  sleep 2
end
Jiggler.logger.warn("Sending INT...")
Process.kill("INT", p2)
Process.wait(p2)
Jiggler.logger.warn("Real time is: #{Process.clock_gettime(Process::CLOCK_MONOTONIC) - real_start}")
Jiggler.logger.warn("CPU usage is: #{cpus.sum / cpus.size}")

# -> RubyProf
# RubyProf.exclude_threads = [Monitoring]
# RubyProf.measure_mode = RubyProf::ALLOCATIONS
# result = RubyProf.profile(:track_allocations => true) do
#   start_jiggler(cli)
#   Jiggler.logger.warn("Ruby-prof is wrapping up...")
# end
# printer = RubyProf::GraphHtmlPrinter.new(result)
# printer.print(File.new("tmp/rubyprof.html", "w"), min_percent: 10)

# -> HeapProfiler
# heap-profiler tmp/allocated.heap
# HeapProfiler.report("tmp") do
#   start_jiggler(cli)
# end
