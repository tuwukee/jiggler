#!/usr/bin/env ruby

# command: bundle exec bin/jigglerload
# bundle exec bin/jiggler -v -r ./spec/fixtures/jobs

# require_relative '../lib/jiggler'
# require_relative '../lib/jiggler/cli'

# require 'debug'


# require 'jiggler'
# require 'jiggler/cli'

# require 'ruby-prof'

# require 'heap-profiler'

require 'uri'
require 'net/http'

require_relative '../lib/jiggler/support/component'
require_relative '../lib/jiggler/scheduled/enqueuer'
require_relative '../lib/jiggler/scheduled/poller'
require_relative '../lib/jiggler/stats/collection'
require_relative '../lib/jiggler/stats/monitor'

require_relative '../lib/jiggler/errors'
require_relative '../lib/jiggler/redis_store'
require_relative '../lib/jiggler/job'
require_relative '../lib/jiggler/config'
require_relative '../lib/jiggler/cleaner'
require_relative '../lib/jiggler/retrier'
require_relative '../lib/jiggler/launcher'
require_relative '../lib/jiggler/manager'
require_relative '../lib/jiggler/worker'
require_relative '../lib/jiggler/summary'
require_relative '../lib/jiggler/version'

require_relative '../lib/jiggler/core'
require_relative '../lib/jiggler/cli'

Jiggler.config[:server_mode] = true

Jiggler.configure_server do |config|
  config[:poll_interval] = 5
  config[:concurrency] = 10
  config[:redis_url] = "redis://jiggler_redis:6379"
  config.logger.level = Logger::WARN
end
Jiggler.run_configuration

# this call inits pool
Sync { Jiggler.config.cleaner.prune_all }

class LoadJob
  include Jiggler::Job
  job_options retries: 1

  def fib(n)
    if n <= 1
      1
    else
      (fib(n-1) + fib(n-2))
    end
  end

  def sample_get_request
    uri = URI("https://httpbin.org/ip")
    res = Net::HTTP.get_response(uri)
    puts "Request Error!!!" unless res.is_a?(Net::HTTPSuccess)
  end

  def perform(idx)
    start = Process.clock_gettime(Process::CLOCK_MONOTONIC)
    sample_get_request # 0.91
    fib(33) # 0.36 71% IO, 29% CPU
    puts "#{idx} ended #{Process.clock_gettime(Process::CLOCK_MONOTONIC) - start}\n"
  end
end

def get_rss_cpu(pid, cpus = nil)
  data = `ps -o rss,%cpu= -p #{pid}`.split("\n").last.strip.split(" ")
  cpus << data[1].to_f if cpus
  "RSS: #{data[0]} %CPU: #{data[1]}"
end

def jobs_count
  Sync do
    Jiggler.config.redis_pool.acquire do |conn|
      conn.call 'LLEN', 'jiggler:list:default'
    end
  end
end

iter = 1
pre_count = 100
count = iter * pre_count

Jiggler.logger.warn "Uploading #{count} jobs..."
Sync do
  iter.times do |i|
    arr = Array.new(pre_count) { |idx| [idx] }
    LoadJob.enqueue_bulk(arr)
  end
end
Jiggler.logger.warn "Created #{count} jobs"
total = jobs_count
Jiggler.logger.warn("--------->>> Main process before fork: #{get_rss_cpu(Process.pid)} Pending: #{total}")


real_start = Process.clock_gettime(Process::CLOCK_MONOTONIC)
p2 = fork do
  cli = Jiggler::CLI.instance

  def start_jiggler(cli)
    begin
      cli.parse_and_init
  
      cli.config.logger.warn("Jiggler is starting for LOAD TEST ✯⸜(*❛‿❛)⸝✯")
      cli.config.logger.warn("Jiggler version=#{Jiggler::VERSION} pid=#{Process.pid} concurrency=#{cli.config[:concurrency]} queues=#{cli.config[:queues].join(',')}")
      cli.start
    rescue => e
      warn e.message
      warn e.backtrace.join("\n")
    end
  end

  start_jiggler(cli)
end

start = Time.now
total = jobs_count
cpus = []
Jiggler.logger.warn("#{get_rss_cpu(p2, cpus)} Pending: #{total}")
loop do
  sleep 2.0
  total = jobs_count
  Jiggler.logger.warn("#{get_rss_cpu(p2, cpus)} Pending: #{total}")
  # Sync { Jiggler.logger.warn(Jiggler.summary) }
  if total == 0
    Jiggler.logger.warn("#{get_rss_cpu(p2, cpus)} Pending: #{total}")
    Jiggler.logger.warn("Done, #{count} jobs in #{Time.now - start} sec")
    break
  end
end
Process.kill("INT", p2)
3.times do
  sleep(2)
  Jiggler.logger.warn("Finalizing... #{get_rss_cpu(p2, cpus)}")
end
Process.wait(p2)
Jiggler.logger.warn("Real time is: #{Process.clock_gettime(Process::CLOCK_MONOTONIC) - real_start}")
Jiggler.logger.warn("CPU usage is: #{cpus.sum / cpus.size}")

# -> RubyProf
# RubyProf.exclude_threads = [Monitoring]
# RubyProf.measure_mode = RubyProf::ALLOCATIONS
# result = RubyProf.profile(:track_allocations => true) do
#   start_jiggler(cli)
#   Jiggler.logger.warn("Ruby-prof is wrapping up...")
# end
# printer = RubyProf::GraphHtmlPrinter.new(result)
# printer.print(File.new("tmp/rubyprof.html", "w"), min_percent: 10)

# -> HeapProfiler
# heap-profiler tmp/allocated.heap
# HeapProfiler.report("tmp") do
#   start_jiggler(cli)
# end
