#!/usr/bin/env ruby

require "async"

require "net/http"
require "uri"

require "polyphony"

CONCURRENCY = 5
JOBS_COUNT = 100 / CONCURRENCY

def fib(n)
  if n <= 1
    1
  else
    (fib(n-1) + fib(n-2))
  end
end

def sample_get_request
  uri = URI("https://httpbin.org/ip")
  res = Net::HTTP.get_response(uri)
  puts "Request Error!!!" unless res.is_a?(Net::HTTPSuccess)
  res
end

def perform(idx, name)
  start = Process.clock_gettime(Process::CLOCK_MONOTONIC)
  fib(18)
  puts idx
  sample_get_request
  10.times do
    File.open(name, "a") { |f| f.write "#{idx} ended #{Process.clock_gettime(Process::CLOCK_MONOTONIC) - start}\n" }
  end
  # puts res.size
end

puts "CONCURRENCY: #{CONCURRENCY}"
puts "STARTING THREADS..."
start = Process.clock_gettime(Process::CLOCK_MONOTONIC)
threads = []
th_name = "tmp/logs/threads.txt"
CONCURRENCY.times do
  threads << Thread.new do
    JOBS_COUNT.times do |i|
      perform(i, th_name)
    end
  end
end
threads.each(&:join)
puts "FINISHED THREADS... TIME: #{Process.clock_gettime(Process::CLOCK_MONOTONIC) - start}"

# puts "STARTING ASYNC FIBERS..."
# start = Process.clock_gettime(Process::CLOCK_MONOTONIC)
# async_name = "tmp/logs/async.txt"
# task = Async do
#   CONCURRENCY.times.map do |i|
#     Async do
#       puts "spawned async #{i}"
#       JOBS_COUNT.times do |j|
#         perform(j, async_name)
#       end
#     end
#   end
# end
# task.wait
# puts "FINISHED ASYNC FIBERS... TIME: #{Process.clock_gettime(Process::CLOCK_MONOTONIC) - start}"


puts "STARTING POLY FIBERS..."
start = Process.clock_gettime(Process::CLOCK_MONOTONIC)
poly_name = "tmp/logs/poly.txt"
tasks = CONCURRENCY.times.map do |i|
  spin do
    puts "spawned polyphony task #{i}"
    JOBS_COUNT.times do |j|
      perform(j, poly_name)
    end
  end    
end
tasks.each(&:await)
puts "FINISHED POLY FIBERS... TIME: #{Process.clock_gettime(Process::CLOCK_MONOTONIC) - start}"


# p = fork do
#   require "polyphony"
#   puts "STARTING POLY FIBERS..."
#   start = Process.clock_gettime(Process::CLOCK_MONOTONIC)
#   poly_name = "tmp/logs/poly.txt"
#   tasks = CONCURRENCY.times.map do |i|
#     spin do
#       puts "spawned polyphony task #{i}"
#       JOBS_COUNT.times do |j|
#         perform(j, poly_name)
#       end
#     end    
#   end
#   tasks.each(&:await)
#   puts "FINISHED POLY FIBERS... TIME: #{Process.clock_gettime(Process::CLOCK_MONOTONIC) - start}"
# end
# Process.wait(p)

